/*
 * File name: CurrentFormulaTopComponent.java
 *    Author: matej
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package diabelli.ui;

import diabelli.ui.GoalsTopComponent.GeneralGoalNode;
import java.util.Collection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//diabelli.ui//CurrentFormula//EN",
autostore = false)
@TopComponent.Description(preferredID = "CurrentFormulaTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "diabelli.ui.CurrentFormulaTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_CurrentFormulaAction",
preferredID = "CurrentFormulaTopComponent")
@Messages({
    "CTL_CurrentFormulaAction=Current Formula",
    "CTL_CurrentFormulaTopComponent=Current Formula",
    "HINT_CurrentFormulaTopComponent=Shows details for the currently selected formula in the 'Diabelli Goals' window."
})
public final class CurrentFormulaTopComponent extends TopComponent {

    private Result<GeneralGoalNode> goalsSelection;
    private final GoalsSelectionListenerImpl goalsSelectionListenerImpl;

    //<editor-fold defaultstate="collapsed" desc="Constructor">
    public CurrentFormulaTopComponent() {
        initComponents();
        setName(Bundle.CTL_CurrentFormulaTopComponent());
        setToolTipText(Bundle.HINT_CurrentFormulaTopComponent());

        goalsSelectionListenerImpl = new GoalsSelectionListenerImpl();
    }
    //</editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        if (goalsSelection == null) {
            goalsSelection = Utilities.actionsGlobalContext().lookupResult(GoalsTopComponent.GeneralGoalNode.class);
        }
        goalsSelection.addLookupListener(goalsSelectionListenerImpl);
    }

    @Override
    public void componentClosed() {
        if (goalsSelection != null) {
            goalsSelection.removeLookupListener(goalsSelectionListenerImpl);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private class GoalsSelectionListenerImpl implements LookupListener {

        public GoalsSelectionListenerImpl() {
        }

        @Override
        public void resultChanged(LookupEvent ev) {
            System.out.println(":::::::::::: Goals selection changed! :::::::::::::::::");
            Collection<? extends GeneralGoalNode> allInstances = goalsSelection.allInstances();
            for (GeneralGoalNode generalGoalNode : allInstances) {
                if (generalGoalNode instanceof GoalsTopComponent.PremisesNode) {
                    System.out.println("Premises of goal '" + (generalGoalNode.goalIndex + 1) + "' selected.");
                } else if (generalGoalNode instanceof GoalsTopComponent.ConclusionNode) {
                    System.out.println("Conclusion of goal '" + (generalGoalNode.goalIndex + 1) + "' selected.");
                } else if (generalGoalNode instanceof GoalsTopComponent.PremiseNode) {
                    GoalsTopComponent.PremiseNode premiseNode = (GoalsTopComponent.PremiseNode) generalGoalNode;
                    System.out.println("Premise '" + (premiseNode.premiseIndex + 1) + "' of goal '" + (generalGoalNode.goalIndex + 1) + "' selected.");
                } else {
                    System.out.println("Entire goal '" + (generalGoalNode.goalIndex + 1) + "' selected.");
                }
            }
        }
    }
}
