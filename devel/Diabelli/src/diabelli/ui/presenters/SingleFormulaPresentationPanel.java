/*
 * File name: SingleFormulaPresentationPanel.java
 *    Author: Matej Urbas [matej.urbas@gmail.com]
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package diabelli.ui.presenters;

import diabelli.logic.FormulaRepresentation;
import diabelli.ui.CurrentFormulaTopComponent;
import diabelli.ui.CurrentFormulaTopComponent.PremiseFormulaNode;
import javax.swing.JPanel;
import org.openide.util.NbBundle;

/**
 *
 * @author Matej Urbas [matej.urbas@gmail.com]
 */
public class SingleFormulaPresentationPanel extends javax.swing.JPanel {

    //<editor-fold defaultstate="collapsed" desc="Fields">
    private static final String BoldItalicEndTag = "</i></b>";
    private static final String BoldItalicStartTag = "<b><i>";
    private final CurrentFormulaTopComponent.GeneralFormulaNode<?> presentedNode;
    private final FormulaRepresentation<?> formula;
    private final int representationIndex;
    private final JPanel presenter;
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructor">
    /**
     * Creates new form SingleFormulaPresentationPanel
     */
    public SingleFormulaPresentationPanel(CurrentFormulaTopComponent.GeneralFormulaNode<?> presentedNode, FormulaRepresentation<?> formula, int representationIndex, JPanel presenter) {
        this.presentedNode = presentedNode;
        this.formula = formula;
        this.representationIndex = representationIndex;
        this.presenter = presenter;
        initComponents();
    }
    //</editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePanel = new javax.swing.JPanel();
        visualisingLabel = new javax.swing.JLabel();
        detailLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        titlePanel.setBackground(new java.awt.Color(213, 237, 246));
        titlePanel.setPreferredSize(new java.awt.Dimension(100, 25));

        visualisingLabel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        visualisingLabel.setText(org.openide.util.NbBundle.getMessage(SingleFormulaPresentationPanel.class, "SingleFormulaPresentationPanel.visualisingLabel.text")); // NOI18N
        visualisingLabel.setToolTipText(org.openide.util.NbBundle.getMessage(SingleFormulaPresentationPanel.class, "SingleFormulaPresentationPanel.visualisingLabel.toolTipText")); // NOI18N

        detailLabel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        detailLabel.setText(org.openide.util.NbBundle.getMessage(SingleFormulaPresentationPanel.class, "SingleFormulaPresentationPanel.detailLabel.text")); // NOI18N

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(visualisingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(visualisingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addComponent(detailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        add(titlePanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel detailLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel visualisingLabel;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Private UI Refresh Methods">
    @NbBundle.Messages({
        "Visualisation.DetailLabel.goal=Goal {0}",
        "Visualisation.DetailLabel.premise=Premise {0}",
        "Visualisation.DetailLabel.premises=Premises"
    })
    void resetDetailLabel() {
        StringBuilder sb = new StringBuilder("<html>");
        
        // Which formula in particular are we displaying?
        CurrentFormulaTopComponent.GeneralFormulaNode<?> targetNode = this.presentedNode;
        if (targetNode instanceof CurrentFormulaTopComponent.FormulaDelegateNode<?>) {
            CurrentFormulaTopComponent.FormulaDelegateNode<?> delegator = (CurrentFormulaTopComponent.FormulaDelegateNode<?>) targetNode;
            targetNode = delegator.getUnderlyingNode();
        }
        sb.append(BoldItalicStartTag).append(Bundle.Visualisation_DetailLabel_goal(targetNode.getSelectedGoalIndex() + 1)).append(BoldItalicEndTag);
        if (targetNode instanceof CurrentFormulaTopComponent.PremiseFormulaNode) {
            PremiseFormulaNode premiseFormulaNode = (PremiseFormulaNode) targetNode;
            sb.append(" > ").append(BoldItalicStartTag).append(Bundle.Visualisation_DetailLabel_premise(premiseFormulaNode.getPremiseIndex() + 1)).append(BoldItalicEndTag);
        }
        
        // Which format are we displaying?
        
        sb.append("</html>");
        detailLabel.setText(sb.toString());
    }
    // </editor-fold>
}
