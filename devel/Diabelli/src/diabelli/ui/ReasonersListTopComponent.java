/*
 * File name: ReasonersListTopComponent.java
 *    Author: matej
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package diabelli.ui;

import diabelli.Diabelli;
import diabelli.components.DiabelliComponent;
import diabelli.components.Reasoner;
import static diabelli.ui.Bundle.ReasonersNode_reasoner_null;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ListView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//diabelli.ui//ReasonersList//EN",
autostore = false)
@TopComponent.Description(preferredID = "ReasonersListTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "diabelli.ui.ReasonersListTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ReasonersListAction",
preferredID = "ReasonersListTopComponent")
@Messages({
    "CTL_ReasonersListAction=Diabelli Reasoners",
    "CTL_ReasonersListTopComponent=Diabelli Reasoners",
    "HINT_ReasonersListTopComponent=This is a list of all Diabelli components (reasoners, presenters, etc.)."
})
public final class ReasonersListTopComponent extends TopComponent implements ExplorerManager.Provider {

    // <editor-fold defaultstate="collapsed" desc="Fields">
    private ExplorerManager em;
    private Lookup lookup;
    // </editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructor">
    public ReasonersListTopComponent() {
        initComponents();
        setName(Bundle.CTL_ReasonersListTopComponent());
        setToolTipText(Bundle.HINT_ReasonersListTopComponent());


        this.em = new ExplorerManager();
        ActionMap map = this.getActionMap();
        InputMap keys = this.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        this.lookup = ExplorerUtils.createLookup(this.em, map);
        this.associateLookup(this.lookup);
        
        
        Children children = new ReasonersRootNode();
        Node root = new AbstractNode(children);
        this.em.setRootContext(root);
        this.em.getRootContext().setDisplayName("DiabelliReasonersList");

        // The list of reasoners does not need to display icons.
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reasonersList = new ListView();

        setLayout(new java.awt.BorderLayout());
        add(reasonersList, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane reasonersList;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Overrides">
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Property Handling">
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    //</editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Explorer Nodes">
    private static class ReasonersNode extends AbstractNode implements Comparable<ReasonersNode> {
        
        private Reasoner reasoner;

        @Messages({
            "ReasonersNode_reasoner_null=The reasoner must not be null."
        })
        public ReasonersNode(Reasoner reasoner) {
            super(Children.LEAF, Lookups.singleton(reasoner));
            if (reasoner == null) {
                throw new IllegalArgumentException(ReasonersNode_reasoner_null());
            }
            this.reasoner = reasoner;
            setName(reasoner.toString());
            setDisplayName(reasoner.getName());
        }

        public Reasoner getReasoner() {
            return reasoner;
        }

        @Override
        public int compareTo(ReasonersNode o) {
            return getReasoner().getName().compareToIgnoreCase(o.getReasoner().getName());
        }
    }

    private static class ReasonersRootNode extends Children.Array {

        private Lookup.Result<DiabelliComponent> reasonersLookupResult;

        public ReasonersRootNode() {
            Diabelli diabelli = Lookup.getDefault().lookup(Diabelli.class);
            reasonersLookupResult = diabelli.getLookup().lookupResult(DiabelliComponent.class);
            reasonersLookupResult.addLookupListener(new LookupListener() {

                @Override
                public void resultChanged(LookupEvent ev) {
                    updateReasonersList();
                }
            });
        }

        @Override
        protected Collection<Node> initCollection() {
            Collection<? extends DiabelliComponent> allReasoners = reasonersLookupResult.allInstances();

            ArrayList<Node> reasonerNodes = new ArrayList<Node>();
            if (allReasoners != null) {
                for (DiabelliComponent reasoner : allReasoners) {
                    if (reasoner instanceof Reasoner) {
                        Reasoner r = (Reasoner) reasoner;
                        reasonerNodes.add(new ReasonersNode(r));
                    }
                }
            }
            Collections.sort(reasonerNodes, new Comparator<Node>() {

                @Override
                public int compare(Node o1, Node o2) {
                    return ((ReasonersNode)o1).compareTo((ReasonersNode)o2);
                }
            });
            return reasonerNodes;
        }

        private void updateReasonersList() {
            remove(getNodes());
            add(initCollection().toArray(new ReasonersNode[0]));
        }
    }
    // </editor-fold>
}
