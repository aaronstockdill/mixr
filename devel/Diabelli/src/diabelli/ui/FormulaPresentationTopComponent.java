/*
 * File name: FormulaPresentationTopComponent.java
 *    Author: matej
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package diabelli.ui;

import diabelli.Diabelli;
import diabelli.components.FormulaPresenter;
import diabelli.logic.FormulaFormat;
import diabelli.logic.FormulaRepresentation;
import diabelli.ui.CurrentFormulaTopComponent.FormatFormulaNode;
import diabelli.ui.CurrentFormulaTopComponent.GeneralFormulaNode;
import diabelli.ui.CurrentFormulaTopComponent.RepresentationFormulaNode;
import diabelli.ui.presenters.SingleFormulaPresentationPanel;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.netbeans.api.annotations.common.NonNull;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Listens to the currently selected formula in the {@link
 * CurrentFormulaTopComponent} window and asks presenters to display it.
 */
@ConvertAsProperties(dtd = "-//diabelli.ui//FormulaPresentation//EN",
autostore = false)
@TopComponent.Description(preferredID = FormulaPresentationTopComponent.PreferredId,
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "diabelli.ui.FormulaPresentationTopComponent")
@ActionReference(path = "Menu/Window/Diabelli", position = 300)
@TopComponent.OpenActionRegistration(displayName = "#CTL_FormulaPresentationAction",
preferredID = FormulaPresentationTopComponent.PreferredId)
@Messages({
    "CTL_FormulaPresentationAction=Diabelli Visualisation",
    "CTL_FormulaPresentationTopComponent=Diabelli Visualisation",
    "HINT_FormulaPresentationTopComponent=This window displays selected formulae in all supported formats.",
    "FPTC_CurrentFormulaTopComponent_notFound=Could not find the CurrentFormulaTopComponent. This is a bug and should never happen."
})
public final class FormulaPresentationTopComponent extends TopComponent implements ExplorerManager.Provider {

    //<editor-fold defaultstate="collapsed" desc="Fields">
    public static final String PreferredId = "FormulaPresentationTopComponent";
    private final FormulaSelectionListener selectedFormulaListener = new FormulaSelectionListener();
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructors">
    public FormulaPresentationTopComponent() {
        initComponents();
        setName(Bundle.CTL_FormulaPresentationTopComponent());
        setToolTipText(Bundle.HINT_FormulaPresentationTopComponent());

    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrlVisualisationsPanel = new javax.swing.JScrollPane();
        visualisationsPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        visualisationsPanel.setLayout(new java.awt.GridLayout(0, 1));
        scrlVisualisationsPanel.setViewportView(visualisationsPanel);

        add(scrlVisualisationsPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrlVisualisationsPanel;
    private javax.swing.JPanel visualisationsPanel;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="TopComponent Stuff">
    @Override
    public void componentOpened() {
        CurrentFormulaTopComponent currentFormulaWindow = (CurrentFormulaTopComponent) WindowManager.getDefault().findTopComponent(CurrentFormulaTopComponent.PreferredID);
        if (currentFormulaWindow != null) {
            currentFormulaWindow.getExplorerManager().addPropertyChangeListener(selectedFormulaListener);
            updateSelectionFrom(currentFormulaWindow.getExplorerManager());
        } else {
            throw new IllegalStateException(Bundle.FPTC_CurrentFormulaTopComponent_notFound());
        }
    }

    @Override
    public void componentClosed() {
        CurrentFormulaTopComponent currentFormulaWindow = (CurrentFormulaTopComponent) WindowManager.getDefault().findTopComponent(CurrentFormulaTopComponent.PreferredID);
        if (currentFormulaWindow != null) {
            currentFormulaWindow.getExplorerManager().removePropertyChangeListener(selectedFormulaListener);
        } else {
            throw new IllegalStateException(Bundle.FPTC_CurrentFormulaTopComponent_notFound());
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    //</editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Visualisation Methods">
    private void showVisualisationsOf(GeneralFormulaNode<?> fromNode, FormulaRepresentation<?> formula) {
        clearVisualisations();
        // Don't display anything if null is given. Just clear the panel.
        if (formula != null) {
            // Add the visualisations of this representation:
            addVisualisationsOf(fromNode, formula, null);
        }
        // This has to be called to refresh the newly added visualisations. Swing
        // does not show the newly added components otherwise.
        validate();
    }
    
    private void showVisualisationsOf(GeneralFormulaNode<?> fromNode, FormulaFormat<?> selectedFormat) {
        clearVisualisations();
        // Don't display anything if null is given. Just clear the panel.
        if (selectedFormat != null) {
            Set<FormulaPresenter> presenters = getAllPresenters();
            addVisualisationsOf(fromNode, selectedFormat, presenters);
        }
        // This has to be called to refresh the newly added visualisations. Swing
        // does not show the newly added components otherwise.
        validate();
    }
    
    private void showVisualisationsOf(GeneralFormulaNode<?> fromNode) {
        clearVisualisations();
        // Don't display anything if null is given. Just clear the panel.
        if (fromNode != null) {
            Set<FormulaPresenter> presenters = getAllPresenters();
            Collection<FormulaFormat<?>> formats = Lookup.getDefault().lookup(Diabelli.class).getFormulaFormatManager().getFormulaFormats();
            for (FormulaFormat<?> format : formats) {
                addVisualisationsOf(fromNode, format, presenters);
            }
        }
        // This has to be called to refresh the newly added visualisations. Swing
        // does not show the newly added components otherwise.
        validate();
    }

    @Messages({
        "FPTC_visualiser_failed=The formula presenter '{0}' unexpectedly failed while visualising a formula of the format '{1}'."
    })
    private void addVisualisationsOf(@NonNull GeneralFormulaNode<?> fromNode, @NonNull FormulaRepresentation<?> formula, Set<FormulaPresenter> withPresenters) {
        if (withPresenters == null) {
            withPresenters = getAllPresenters();
        }
        // Find all presenters that are able to display this formula and put
        // their panels onto this panel:
        for (FormulaPresenter presenter : withPresenters) {
            try {
                if (presenter.canPresent(formula)) {
                    Component visualisationPanel = presenter.createVisualiserFor(formula);
                    if (visualisationPanel != null) {
                        // Now put the panel onto this panel:
                        SingleFormulaPresentationPanel pnl = new SingleFormulaPresentationPanel(fromNode, formula, -1, visualisationPanel, presenter);
                        visualisationsPanel.add(pnl);
                    }
                }
            } catch (Exception e) {
                Logger.getLogger(FormulaPresentationTopComponent.class.getName()).log(Level.WARNING, Bundle.FPTC_visualiser_failed(presenter.getName(), formula.getFormat().getPrettyName()), e);
            }
        }
    }

    private void addVisualisationsOf(GeneralFormulaNode<?> fromNode, FormulaFormat<?> selectedFormat, Set<FormulaPresenter> presenters) {
        // Add visualisations of all representations in this format:
        ArrayList<? extends FormulaRepresentation<?>> reps = fromNode.getSelectedFormula().fetchRepresentations(selectedFormat);
        if (reps != null) {
            for (FormulaRepresentation<?> rep : reps) {
                addVisualisationsOf(fromNode, rep, presenters);
            }
        }
    }

    private void clearVisualisations() {
        visualisationsPanel.removeAll();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Current Selection Update">
    private void updateSelectionFrom(ExplorerManager em) {
        Node[] selectedNodes = em.getSelectedNodes();
        if (selectedNodes != null && selectedNodes.length > 0 && selectedNodes[0] instanceof GeneralFormulaNode<?>) {
            updateSelection((GeneralFormulaNode<?>) selectedNodes[0]);
        } else {
            updateSelection(null);
        }
    }

    private void updateSelection(GeneralFormulaNode<?> currentlySelectedFormula) {
        if (currentlySelectedFormula == null) {
            clearVisualisations();
        } else {
            Logger.getLogger(FormulaPresentationTopComponent.class.getName()).log(Level.INFO, "Presenting: {0}", currentlySelectedFormula.getClass().getCanonicalName());
            if (currentlySelectedFormula instanceof RepresentationFormulaNode<?>) {
                RepresentationFormulaNode<?> formulaRep = (RepresentationFormulaNode<?>) currentlySelectedFormula;
                // Display just visualisation of this representation (there will
                // usually be just one (the one for this particular format's
                // representation), but we still look all of visualisations:
                showVisualisationsOf(formulaRep, currentlySelectedFormula.getSelectedFormulaRepresentation());
            } else if (currentlySelectedFormula instanceof CurrentFormulaTopComponent.FormatFormulaNode<?>) {
                FormatFormulaNode<?> formatFormulaNode = (FormatFormulaNode<?>) currentlySelectedFormula;
                // Display all representations in the selected format:
                showVisualisationsOf(formatFormulaNode, formatFormulaNode.getSelectedFormat());
            } else {
                showVisualisationsOf(currentlySelectedFormula);
            }
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Selected Formula Changed Listener">
    private class FormulaSelectionListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                ExplorerManager em = (ExplorerManager) evt.getSource();
                updateSelectionFrom(em);
            }
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Private Helper Methods">
    private static Set<FormulaPresenter> getAllPresenters() {
        return Lookup.getDefault().lookup(Diabelli.class).getPresentationManager().getPresenters();
    }
    // </editor-fold>
}
