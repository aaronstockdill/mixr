/*
 * File name: FormulaPresentationTopComponent.java
 *    Author: matej
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package diabelli.ui;

import diabelli.ui.CurrentFormulaTopComponent.CurrentGoalSelectionNode;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Listens to the currently selected formula in the {@link
 * CurrentFormulaTopComponent} window and asks presenters to display it.
 */
@ConvertAsProperties(dtd = "-//diabelli.ui//FormulaPresentation//EN",
autostore = false)
@TopComponent.Description(preferredID = FormulaPresentationTopComponent.PreferredId,
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "diabelli.ui.FormulaPresentationTopComponent")
@ActionReference(path = "Menu/Window/Diabelli", position = 300)
@TopComponent.OpenActionRegistration(displayName = "#CTL_FormulaPresentationAction",
preferredID = FormulaPresentationTopComponent.PreferredId)
@Messages({
    "CTL_FormulaPresentationAction=FormulaPresentation",
    "CTL_FormulaPresentationTopComponent=Diabelli Visualisation",
    "HINT_FormulaPresentationTopComponent=This window displays selected formulae in all supported formats.",
    "FPTC_CurrentFormulaTopComponent_notFound=Could not find the CurrentFormulaTopComponent. This is a bug and should never happen."
})
public final class FormulaPresentationTopComponent extends TopComponent {

    //<editor-fold defaultstate="collapsed" desc="Fields">
    public static final String PreferredId = "FormulaPresentationTopComponent";
    private final FormulaSelectionListener selectedFormulaListener = new FormulaSelectionListener();
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructors">
    public FormulaPresentationTopComponent() {
        initComponents();
        setName(Bundle.CTL_FormulaPresentationTopComponent());
        setToolTipText(Bundle.HINT_FormulaPresentationTopComponent());

    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="TopComponent Stuff">
    @Override
    public void componentOpened() {
        CurrentFormulaTopComponent currentFormulaWindow = (CurrentFormulaTopComponent) WindowManager.getDefault().findTopComponent(CurrentFormulaTopComponent.PreferredID);
        if (currentFormulaWindow != null) {
            currentFormulaWindow.getExplorerManager().addPropertyChangeListener(selectedFormulaListener);
            updateSelectionFrom(currentFormulaWindow.getExplorerManager());
        } else {
            throw new IllegalStateException(Bundle.FPTC_CurrentFormulaTopComponent_notFound());
        }
    }

    @Override
    public void componentClosed() {
        CurrentFormulaTopComponent currentFormulaWindow = (CurrentFormulaTopComponent) WindowManager.getDefault().findTopComponent(CurrentFormulaTopComponent.PreferredID);
        if (currentFormulaWindow != null) {
            currentFormulaWindow.getExplorerManager().removePropertyChangeListener(selectedFormulaListener);
        } else {
            throw new IllegalStateException(Bundle.FPTC_CurrentFormulaTopComponent_notFound());
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    //</editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Current Selection Update">
    private void updateSelectionFrom(ExplorerManager em) {
        Node[] selectedNodes = em.getSelectedNodes();
        if (selectedNodes != null && selectedNodes.length > 0 && selectedNodes[0] instanceof CurrentGoalSelectionNode) {
            updateSelection((CurrentGoalSelectionNode) selectedNodes[0]);
        } else {
            updateSelection(null);
        }
    }

    private void updateSelection(CurrentGoalSelectionNode currentlySelectedFormula) {
        if (currentlySelectedFormula == null) {
            // TODO: Clear the panel.
        } else {
            // TODO: Show the formula with all possible presenters.
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Selected Formula Changed Listener">
    private class FormulaSelectionListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if ("selectedNodes".equals(evt.getPropertyName())) {
                ExplorerManager em = (ExplorerManager) evt.getSource();
                updateSelectionFrom(em);
            }
        }
    }
    // </editor-fold>
}
